#w1=3585nm;   #原设置
#w2=215[nm];

nm=1e-9;
um=1e-6;
waveguide_w=400*nm;	#输入波导的宽度
waveguide_h=250*nm;	#输入波导的高度
waveguide_l=3*um;	#输入波导的长度
waveguide_w_2=3*um;	#输出波导的宽度
waveguide_h_2=250*nm;	#输出波导的高度
waveguide_l_2=3*um;	#输出波导的长度
gap=0.1*um;	#输出波导间距
substrate_h=3*um;	#二氧化硅衬底的厚度

QR_code=(0.025*30)*um;	#二维码尺寸
pixel=30;		#像素
size0=QR_code/pixel;

mm=500;

#种群大小
NIND = 50;
#初始生成种群
for (kk = 1:NIND){
   Q_MATRIX = round(randmatrix(pixel,pixel));
   del('Q_MATRIX_'+num2str(kk)+'.txt');
   write('Q_MATRIX_'+num2str(kk)+'.txt',num2str(Q_MATRIX)); 
}

# 最大遗传代数
MAXGEN = 200; 
# 开始演进类算法优化
TRANSMISSION = 100;

structure_result = matrix(NIND, pixel*pixel);
transmission_result_up = matrix(NIND, TRANSMISSION);

for (ite = 1: MAXGEN){
    for (cal = 1:NIND){
        ?ite;
        ?cal;
        switchtolayout;
        select('structure group');
        set('waveguide_w',waveguide_w);
        set('waveguide_h',waveguide_h);
        set('waveguide_l',waveguide_l);
        set('waveguide_w_2',waveguide_w_2);
        set('waveguide_h_2',waveguide_h_2);
        set('waveguide_l_2',waveguide_l_2);
        set('gap',gap);
        set('substrate_h',substrate_h);
        set('QR_code',QR_code);
        set('pixel',pixel);
        set('mm',mm);
        set('name1',cal);

        select('varFDTD');
        set('x min',-waveguide_l);
        set('x max',QR_code+waveguide_l);
        set('y',0);
        set('y span',QR_code*4);
        set('z max',waveguide_h/2+substrate_h);
        set('z min',-substrate_h-waveguide_h/2);

        select('output_up');
        set('x',QR_code+waveguide_l);


        runsetup;
        run;
        
        # 获取结构参数
        Q_MATRIX=readdata('Q_MATRIX_'+num2str(cal)+'.txt');
        for (jj=1:pixel)
        {
            structure_result(cal,(jj-1)*pixel+1:jj*pixel) = Q_MATRIX(jj, 1:pixel);
        }

        for (kk=1:100){
            if (haveresult('output_up','T')){
        temp=getresult('output_up','T');
        transmission_result_up(cal,:)=pinch(temp.T);
        #temp=getresult('output_down','T');
        #transmission_result_down(cal,:)=pinch(temp.T);
        kk=100;
        }
        run;
        }

    }
        
    # 作为参数输入遗传算法
    matlabput(structure_result, transmission_result_up, NIND);

    # 遗传算法实现
    matlab("
        GGAP = 0.95; 
        px = 0.3; 
        pm = 0.01;
        Chrom = structure_result;
        % ObjV =  1-(transmission_result_up(:, 50));
        target_transmission = 0.9*ones(NIND, 100);        
        
        ObjV = zeros(NIND, 1);

        for number = 1:NIND;
            ObjV(number,1) = (sum(abs(target_transmission(1, :)-transmission_result_up(number, :))));
        end
        
        FitnV = ranking(ObjV);
        SelCh1 = select('rws', Chrom, FitnV, GGAP);     
        SelCh2 = recombin('xovsp', SelCh1, px); 
        SelCh3 = mut(SelCh2, pm);
        Chrom_new = reins(Chrom, SelCh3); 
    ");
    
    matlabget(Chrom);
    write('Chrom.txt',num2str(Chrom));    
    matlabget(ObjV);
    ave_ObjV = mean(ObjV);
    ?ave_ObjV;
    write('ObjV.txt',num2str(zeros(1,10)));
    write('ObjV.txt',num2str(ave_ObjV));
    write('ObjV.txt',num2str(ite));
    write('ObjV.txt',num2str(ObjV));
    matlabget(FitnV);
    write('FitnV.txt',num2str(FitnV));
    matlabget(SelCh1);
    write('SelCh1.txt',num2str(SelCh1)); 
    matlabget(SelCh2);
    write('SelCh2.txt',num2str(SelCh2)); 
    matlabget(SelCh3);
    write('SelCh3.txt',num2str(SelCh3)); 
    matlabget(Chrom_new);
    write('Chrom_new.txt',num2str(Chrom_new)); 
    
    for (line_num = 1: NIND){
        Q_MATRIX_NEW = zeros(pixel, pixel);
        line = Chrom_new(line_num, :);
        for (line_num_new = 1:pixel){
            Q_MATRIX_NEW(line_num_new,:) = line(1,(line_num_new-1)*pixel+1:line_num_new*pixel);    
        }
        del('Q_MATRIX_'+num2str(line_num)+'.txt');
        write('Q_MATRIX_'+num2str(line_num)+'.txt', num2str(Q_MATRIX_NEW));     
    }     
      
}
