#w1=3585nm;   #原设置
#w2=215[nm];

nm=1e-9;
um=1e-6;
waveguide_w=400*nm;	#输入波导的宽度
waveguide_h=250*nm;	#输入波导的高度
waveguide_l=3*um;	#输入波导的长度
waveguide_w_2=3*um;	#输出波导的宽度
waveguide_h_2=250*nm;	#输出波导的高度
waveguide_l_2=3*um;	#输出波导的长度
gap=0.1*um;	#输出波导间距
substrate_h=3*um;	#二氧化硅衬底的厚度

QR_code=(0.025*40)*um;	#二维码尺寸
pixel=40;		#像素
size0=QR_code/pixel;

mm=500;

#种群大小
NIND = 1;
cal = NIND;
#初始生成种群
for (kk = 1:NIND){
   Q_MATRIX = round(randmatrix(pixel,pixel));
   del('Q_MATRIX_'+num2str(kk)+'.txt');
   write('Q_MATRIX_'+num2str(kk)+'.txt',num2str(Q_MATRIX));
}

# 最高温度
MAXGEN = 2000;
# 最低温度
T = 1e-18;

# 透射谱
TRANSMISSION = 200;
transmission_result_old = matrix(NIND, TRANSMISSION);
transmission_result_new = matrix(NIND, TRANSMISSION);

# 结构参数
structure_result_old = matrix(NIND, pixel*pixel);
structure_result_new = matrix(NIND, pixel*pixel);

# 执行第一次
switchtolayout;
select('structure group');
set('waveguide_w',waveguide_w);
set('waveguide_h',waveguide_h);
set('waveguide_l',waveguide_l);
set('waveguide_w_2',waveguide_w_2);
set('waveguide_h_2',waveguide_h_2);
set('waveguide_l_2',waveguide_l_2);
set('gap',gap);
set('substrate_h',substrate_h);
set('QR_code',QR_code);
set('pixel',pixel);
set('mm',mm);
set('name1',cal);

select('varFDTD');
set('x min',-waveguide_l);
set('x max',QR_code+waveguide_l);
set('y',0);
set('y span',QR_code*4);
set('z max',waveguide_h/2+substrate_h);
set('z min',-substrate_h-waveguide_h/2);

select('output_up');
set('x',QR_code+waveguide_l);

runsetup;
run;
        
# 获取结构参数
Q_MATRIX=readdata('Q_MATRIX_'+num2str(cal)+'.txt');
for (jj=1:pixel)
{
    structure_result_old(cal,(jj-1)*pixel+1:jj*pixel) = Q_MATRIX(jj, 1:pixel);
}

for (kk=1:100){
     if (haveresult('output_up','T')){
         temp=getresult('output_up','T');
         transmission_result_old(cal,:)=pinch(temp.T);
         kk=100;
        }
     run;
}

ite = 0;

for (0; MAXGEN>T; 0){    
    # 作为参数输入MATLAB
    matlabput(structure_result_old, transmission_result_old);

    # 随机变异
    matlab("
        pm = 0.2;
        Chrom = structure_result_old;        
        Chrom_new = mut(Chrom, pm);
    ");
    
    matlabget(Chrom_new);
    write('Chrom_new.txt',num2str(ite));
    write('Chrom_new.txt', num2str(Chrom_new));
    
    # 新结构参数
    for (line_num = 1: NIND){
        Q_MATRIX_NEW = zeros(pixel, pixel);
        line = Chrom_new(line_num, :);
        for (line_num_new = 1:pixel){
            Q_MATRIX_NEW(line_num_new,:) = line(1,(line_num_new-1)*pixel+1:line_num_new*pixel);    
        }
        del('Q_MATRIX_'+num2str(line_num)+'.txt');
        write('Q_MATRIX_'+num2str(line_num)+'.txt', num2str(Q_MATRIX_NEW));     
    }  
    
    # 对新结构参数进行仿真
    ?ite;
    switchtolayout;
    select('structure group');
    set('waveguide_w',waveguide_w);
    set('waveguide_h',waveguide_h);
    set('waveguide_l',waveguide_l);
    set('waveguide_w_2',waveguide_w_2);
    set('waveguide_h_2',waveguide_h_2);
    set('waveguide_l_2',waveguide_l_2);
    set('gap',gap);
    set('substrate_h',substrate_h);
    set('QR_code',QR_code);
    set('pixel',pixel);
    set('mm',mm);
    set('name1',cal);

    select('varFDTD');
    set('x min',-waveguide_l);
    set('x max',QR_code+waveguide_l);
    set('y',0);
    set('y span',QR_code*4);
    set('z max',waveguide_h/2+substrate_h);
    set('z min',-substrate_h-waveguide_h/2);
    
    select('output_up');
    set('x',QR_code+waveguide_l);
    
    runsetup;
    run;
        
    # 获取结构参数
    Q_MATRIX=readdata('Q_MATRIX_'+num2str(cal)+'.txt');
    for (jj=1:pixel)
    {
        structure_result_new(cal,(jj-1)*pixel+1:jj*pixel) = Q_MATRIX(jj, 1:pixel);
    }

    for (kk=1:100){
        if (haveresult('output_up','T')){
            temp=getresult('output_up','T');
            transmission_result_new(cal,:)=pinch(temp.T);
            kk=100;
        }
        run;
    }
    
    target_transmission = 0.95*ones(NIND, 200);
    Obj_old = (sum(abs(target_transmission(NIND, :)-transmission_result_old(NIND, :))));
    Obj_new = (sum(abs(target_transmission(NIND, :)-transmission_result_new(NIND, :))));
    
    write('Chrom_new.txt',num2str(MAXGEN));    
    write('Chrom_new.txt',num2str(Obj_old));
    write('Chrom_new.txt', num2str(Obj_new));
    
    dc = Obj_new - Obj_old;
    if(dc<0){
        structure_result_old = structure_result_new;
        transmission_result_old = transmission_result_new;
    }else if(exp(-dc/(MAXGEN)) >= rand){
        structure_result_old = structure_result_new;
        transmission_result_old = transmission_result_new;
    }else{
        structure_result_old = structure_result_old;
        transmission_result_old = transmission_result_old;
    }
    
    MAXGEN = MAXGEN * 0.98;
    ite = ite + 1;
          
}
