switchtolayout;
#波长范围
lambda=(500:100:2000)*1e-9;
#对应角频率
w=2*pi*c/lambda;
#Ag的Drude模型参数
epsinf=3.7;
wp=1.37e16;
gamap=0.27e14;
eps_m=epsinf-wp^2/(w^2+1i*gamap*w);
#用来存不同波长的drude参数矩阵pp
pp=matrix(length(lambda),3);
#transpose表示矩阵转置
pp(1:length(lambda),1)=transpose(lambda);
pp(1:length(lambda),2)=transpose(real(eps_m));
pp(1:length(lambda),3)=transpose(imag(eps_m));
#自定义一个材料
sampledData = [c/lambda,eps_m]; 
setmaterial('Ag',"max coefficients",2); 
setmaterial('Ag','sampled data',sampledData);
#波导参数
delta=10e-9;
cavity1_l=400e-9;
cavity1_w=400e-9;
gap1=10e-9;
gap2=10e-9;
shift1=0*1e-9;
shift2=100*1e-9;
shift3=0*1e-9;
shift4=70*1e-9;
pixel=20;

waveguide1_l=100e-9;
waveguide1_w=100e-9;
waveguide2_l=100e-9;
waveguide2_w=100e-9;
width_bottom=200e-9;
width_top=400e-9;
total_l=waveguide1_l+gap1+cavity1_l+gap2+waveguide2_l;

# 最高温度
MAXGEN = 2000;
# 最低温度
T = 1e-18;

#初始化
NIND = 1;
cal = NIND;
#初始生成种群
for (kk = 1:NIND){
   Q_MATRIX = round(randmatrix(pixel,pixel));
   del('Q_MATRIX_'+num2str(kk)+'.txt');
   write('Q_MATRIX_'+num2str(kk)+'.txt',num2str(Q_MATRIX));
}

# 透射谱
TRANSMISSION = 501;
transmission_result_old = matrix(NIND, TRANSMISSION);
transmission_result_new = matrix(NIND, TRANSMISSION);

# 结构参数
structure_result_old = matrix(NIND, pixel*pixel);
structure_result_new = matrix(NIND, pixel*pixel);


# 执行第一次
select('structure group');
set('waveguide1_l',waveguide1_l);
set('waveguide1_w',waveguide1_w);
set('waveguide2_l',waveguide2_l);
set('waveguide2_w',waveguide2_w);
set('width_bottom',width_bottom);
set('width_top',width_top);

total_w=width_bottom+cavity1_w+width_top;
select('structure group');
set('cavity1_w',cavity1_w);
set('cavity1_l',cavity1_l);
set('gap1',gap1);
set('gap2',gap2);
set('shift1',shift1);
set('shift2',shift2);
set('shift3',shift3);
set('shift4',shift4);

select('structure group');
switchtolayout;
set('index', NIND);
runsetup;
#设置仿真范围
select('FDTD');
set('x',total_l/2);
set('x span',total_l);
set('y',0);
set('y span',total_w);
#设置光源
select('source_1');
set('x',5e-9);
set('y',0);
set('y span',total_w);
#设置输入gap网格
select('mesh_input_gap');
set('x min',waveguide1_l);
set('x max',waveguide1_l+gap1);
set('y',0);
set('y span',waveguide1_w);
set('dx',gap1/5);
set('dy',cavity1_l/pixel/4);
#设置二维码网格
select('mesh_cavity1');
set('x',waveguide1_l+gap1+cavity1_l/2+shift1);
set('x span',cavity1_l);
set('y',shift2);
set('y span',cavity1_w);
set('dx',cavity1_l/pixel/4);
set('dy',cavity1_l/pixel/4);
#设置输出gap的网格
select('mesh_output_gap');
set('x min',waveguide1_l+gap1+cavity1_l);
set('x max',waveguide1_l+gap1+cavity1_l+gap2);
set('y',0);
set('y span',waveguide2_w);
set('dx',gap2/5);
set('dy',cavity1_l/pixel/4);
#设置monitor
select('transmission');
set('x',total_l);
set('y',0);
set('y span',total_w);

# 获取结构参数
Q_MATRIX=readdata('Q_MATRIX_'+num2str(NIND)+'.txt');
for (jj=1:pixel)
{
    structure_result_old(NIND,(jj-1)*pixel+1:jj*pixel) = Q_MATRIX(jj, 1:pixel);
}

select('source_1');
updatesourcemode;
run;

# 如果没有结果就一直run
for (kk=1:100){
#Returns 1 if the "name" has a result named "data", and 0 if it does not. haveresult("name","data");
     if (haveresult('transmission','T')){
         temp=getresult('transmission','T');
         transmission_result_old(NIND,:)=pinch(temp.T);
         kk=100;
        }
     run;
}

#模拟退火算法开始
ite=0;
for (0; MAXGEN>T; 0){    #在MaxGen>0时进行循环
    # 作为参数输入MATLAB
    matlabput(structure_result_old, transmission_result_old);

    # 随机变异产生新解
    matlab("
        pm = 0.2;
        Chrom = structure_result_old;        
        Chrom_new = mut(Chrom, pm);
    ");
    #记录每代的新结构
    matlabget(Chrom_new);
    write('Chrom_new.txt',"新解代数："+num2str(ite+1));
    write('Chrom_new.txt', "新解结构："+num2str(Chrom_new));
    
    # 新结构参数转化为矩阵
    for (line_num = 1: NIND){
        Q_MATRIX_NEW = zeros(pixel, pixel);
        line = Chrom_new(line_num, :);
        for (line_num_new = 1:pixel){
            Q_MATRIX_NEW(line_num_new,:) = line(1,(line_num_new-1)*pixel+1:line_num_new*pixel);    
        }
        del('Q_MATRIX_'+num2str(line_num)+'.txt');
        write('Q_MATRIX_'+num2str(line_num)+'.txt', num2str(Q_MATRIX_NEW));     
    }  
    
    # 对新结构参数进行仿真
    ?msg = "当前代数："+num2str(ite);
    ?msg = "当前温度："+num2str(MAXGEN);
    switchtolayout;
    # 执行第一次
	select('structure group');
	set('waveguide1_l',waveguide1_l);
	set('waveguide1_w',waveguide1_w);
	set('waveguide2_l',waveguide2_l);
	set('waveguide2_w',waveguide2_w);
	set('width_bottom',width_bottom);
	set('width_top',width_top);

	total_w=width_bottom+cavity1_w+width_top;
	select('structure group');
	set('cavity1_w',cavity1_w);
	set('cavity1_l',cavity1_l);
	set('gap1',gap1);
	set('gap2',gap2);
	set('shift1',shift1);
	set('shift2',shift2);
	set('shift3',shift3);
	set('shift4',shift4);

	select('structure group');
	switchtolayout;
	set('index', NIND);
	runsetup;
	#设置仿真范围
	select('FDTD');
	set('x',total_l/2);
	set('x span',total_l);
	set('y',0);
	set('y span',total_w);
	#设置光源
	select('source_1');
	set('x',5e-9);
	set('y',0);
	set('y span',total_w);
	#设置输入gap网格
	select('mesh_input_gap');
	set('x min',waveguide1_l);
	set('x max',waveguide1_l+gap1);
	set('y',0);
	set('y span',waveguide1_w);
	set('dx',gap1/5);
	set('dy',cavity1_l/pixel/4);
	#设置二维码网格
	select('mesh_cavity1');
	set('x',waveguide1_l+gap1+cavity1_l/2+shift1);
	set('x span',cavity1_l);
	set('y',shift2);
	set('y span',cavity1_w);
	set('dx',cavity1_l/pixel/4);
	set('dy',cavity1_l/pixel/4);
	#设置输出gap的网格
	select('mesh_output_gap');
	set('x min',waveguide1_l+gap1+cavity1_l);
	set('x max',waveguide1_l+gap1+cavity1_l+gap2);
	set('y',0);
	set('y span',waveguide2_w);
	set('dx',gap2/5);
	set('dy',cavity1_l/pixel/4);
	#设置monitor
	select('transmission');
	set('x',total_l);
	set('y',0);
	set('y span',total_w);
        
    # 获取结构参数
    Q_MATRIX=readdata('Q_MATRIX_'+num2str(cal)+'.txt');
    for (jj=1:pixel)
    {
        structure_result_new(cal,(jj-1)*pixel+1:jj*pixel) = Q_MATRIX(jj, 1:pixel);
    }
	#更新光源
	select('source_1');
	updatesourcemode;
	run;
	
	#防止程序中断直到得到T
    for (kk=1:100){
        if (haveresult('transmission','T')){
            temp=getresult('transmission','T');
            transmission_result_new(cal,:)=pinch(temp.T);
            kk=100;
        }
        run;
    }
    
    target_transmission = 1;
    Obj_old = (abs(target_transmission-transmission_result_old(NIND, 417)));
    Obj_new = (abs(target_transmission-transmission_result_new(NIND, 417)));
    
    #记录历史Obj
    write('Obj.txt',"当前代数："+num2str(ite));
    write('Obj.txt',"当前温度："+num2str(MAXGEN));    
    write('Obj.txt',"旧结构Obj:"+num2str(Obj_old));
    write('Obj.txt',"当前新结构Obj:"+num2str(Obj_new));
    
    #判断是否接受新的状态
    dc = Obj_new - Obj_old;
    if(dc<0){
        structure_result_old = structure_result_new;
        transmission_result_old = transmission_result_new;
    }else if(exp(-dc/(MAXGEN)) >= rand){
        structure_result_old = structure_result_new;
        transmission_result_old = transmission_result_new;
    }else{
        structure_result_old = structure_result_old;
        transmission_result_old = transmission_result_old;
    } 
    #记录历史结构和透射谱
    write('History.txt',"当前代数："+num2str(ite)); 
    write('History.txt',"当前温度："+num2str(MAXGEN)); 
    write('History.txt',"当代结构参数："+num2str(structure_result_old));
    write('History.txt',"当代透射谱："+num2str(transmission_result_old));

    #降温继续迭代
    MAXGEN = MAXGEN * 0.98;
    ite = ite + 1;
}


















